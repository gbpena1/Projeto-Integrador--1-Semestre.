package view;
import Controller.FuncionarioController;
import Controller.RegistroController;
import models.RegistroPonto.TipoRegistro;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.Scanner;

public class MenuConsole {
	static Scanner scanner = new Scanner(System.in);

	public static void exibirMenu() {
		int opcao;
		do {
			System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
			System.out.println("‚ïë    SISTEMA BANCO DE HORAS         ‚ïë");
			System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
			System.out.println("1. Cadastrar Funcion√°rio");
			System.out.println("2. Listar Funcion√°rios");
			System.out.println("3. Registrar Ponto");
			System.out.println("4. Consultar Saldo");
			System.out.println("5. Relat√≥rio Detalhado");
			System.out.println("0. Sair");
			System.out.print("\nEscolha uma op√ß√£o: ");

			try {
				opcao = scanner.nextInt();
				scanner.nextLine();

				switch (opcao) {
					case 1 -> cadastrarFuncionario();
					case 2 -> FuncionarioController.listarFuncionarios();
					case 3 -> registrarPonto();
					case 4 -> consultarSaldo();
					case 5 -> exibirRelatorioDetalhado();
					case 0 -> System.out.println("\nEncerrando sistema... At√© logo!");
					default -> System.out.println("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.");
				}
			} catch (Exception e) {
				System.out.println("\n‚ùå Entrada inv√°lida. Digite apenas n√∫meros.");
				scanner.nextLine(); // Limpa o buffer
				opcao = -1; // Continua o loop
			}
		} while (opcao != 0);

		scanner.close();
    }

	private static void cadastrarFuncionario() {
		System.out.println("\n--- CADASTRAR FUNCION√ÅRIO ---");
		System.out.print("Nome: ");
		String nome = scanner.nextLine().trim();

		if (nome.isEmpty()) {
			System.out.println("‚ùå Nome n√£o pode estar vazio.");
			return;
		}

		System.out.print("Matr√≠cula: ");
		String matricula = scanner.nextLine().trim();

		if (matricula.isEmpty()) {
			System.out.println("‚ùå Matr√≠cula n√£o pode estar vazia.");
			return;
		}

		FuncionarioController.cadastrarFuncionario(nome, matricula);
	}

	private static void registrarPonto() {
		System.out.println("\n--- REGISTRAR PONTO ---");
		System.out.print("Matr√≠cula: ");
		String matricula = scanner.nextLine().trim();
		// Colocando data automatica no padr√£o (AAAA-MM-DD)
		System.out.print("Data (AAAA-MM-DD) ou ENTER para hoje: ");
		String dataStr = scanner.nextLine().trim();
		LocalDate data;
		// Valida√ß√£o de data/hora
		try {
			data = dataStr.isEmpty() ? LocalDate.now() : LocalDate.parse(dataStr);
		} catch (DateTimeParseException e) {
			System.out.println("‚ùå Data inv√°lida. Use o formato AAAA-MM-DD");
			return;
		}

		System.out.print("Tipo (1-NORMAL ou 2-COMPENSADA): ");
		int tipoOpcao;
		try {
			tipoOpcao = scanner.nextInt();
			scanner.nextLine();
		} catch (Exception e) {
			System.out.println("‚ùå Op√ß√£o inv√°lida.");
			scanner.nextLine();
			return;
		}

		TipoRegistro tipo;
		if (tipoOpcao == 1) {
			tipo = TipoRegistro.NORMAL;
		} else if (tipoOpcao == 2) {
			tipo = TipoRegistro.COMPENSADA;
		} else {
			System.out.println("‚ùå Op√ß√£o inv√°lida. Digite 1 ou 2.");
			return;
		}

		if (tipo == TipoRegistro.NORMAL) {
			try {
				System.out.print("Hora Entrada (HH:mm): ");
				LocalTime entrada = LocalTime.parse(scanner.nextLine().trim());

				System.out.print("Hora Sa√≠da (HH:mm): ");
				LocalTime saida = LocalTime.parse(scanner.nextLine().trim());

				RegistroController.registrarPonto(matricula, data, entrada, saida, tipo, 0);
			} catch (DateTimeParseException e) {
				System.out.println("‚ùå Hor√°rio inv√°lido. Use o formato HH:mm (ex: 08:00)");
			}
		} else {
			try {
				System.out.print("Horas a compensar: ");
				int horas = scanner.nextInt();
				scanner.nextLine();

				RegistroController.registrarPonto(matricula, data, null, null, tipo, horas);
			} catch (Exception e) {
				System.out.println("‚ùå Valor inv√°lido.");
				scanner.nextLine();
			}
		}
	}

	private static void consultarSaldo() {
		System.out.println("\n--- CONSULTAR SALDO ---");
		System.out.print("Matr√≠cula: ");
		String matricula = scanner.nextLine().trim();

		if (FuncionarioController.buscarPorMatricula(matricula) == null) {
			System.out.println("‚ùå Funcion√°rio n√£o encontrado.");
			return;
		}

		int saldoMinutos = RegistroController.consultarSaldoMinutos(matricula);
		String saldoFormatado = RegistroController.formatarSaldo(saldoMinutos);

		System.out.println("\nüí∞ Saldo de horas: " + saldoFormatado);
	}

	private static void exibirRelatorioDetalhado() {
		System.out.println("\n--- RELAT√ìRIO DETALHADO ---");
		System.out.print("Matr√≠cula: ");
		String matricula = scanner.nextLine().trim();

		RegistroController.exibirRelatorio(matricula);
	}
}
/*
Tratamento de erros:
	try {
    opcao = scanner.nextInt();
    scanner.nextLine();
    // ... c√≥digo ...
} catch (Exception e) {
    System.out.println("\n‚ùå Entrada inv√°lida. Digite apenas n√∫meros.");
    scanner.nextLine();
    opcao = -1;
}
	O que ele faz:
		try: Tenta executar o c√≥digo
		catch: Se der erro, captura e n√£o trava o programa
		scanner.nextLine(): Limpa o que foi digitado errado

		Antes: Se digitasse "abc" ‚Üí programa TRAVAVA ‚ùå
		Agora: Se digitar "abc" ‚Üí mostra erro e continua ‚úÖ

Valida√ß√µes nos Cadastros:
	if (nome.isEmpty()) {
    System.out.println("‚ùå Nome n√£o pode estar vazio.");
    return;
}
	O que ele faz:
		.trim(): Remove espa√ßos extras
		.isEmpty(): Verifica se est√° vazio
		return: Sai do m√©todo sem fazer nada
		Impede: o cadastro de funcion√°rio sem nome ou matr√≠cula

 Data Automatica:
	Operador tern√°rio: condi√ß√£o ? seVerdadeiro : seFalso
		Com ele consigo atribuir uma condi√ß√£o de uma variavel sem usar if/else

		Se digitou vazio (ENTER) ‚Üí usa data de hoje (LocalDate.now())
		Se digitou algo ‚Üí converte o texto pra data (LocalDate.parse())

		Antes: Tinha que digitar a data toda vez
		Agora: Aperta ENTER = usa hoje

Valida√ß√£o de Data/Hora
	O que faz:
		Se digitar data errada (ex: "99/99/9999") ele mostra erro ao inv√©s de travar

Tipo de Registro
	if (tipoOpcao == 1) {
    tipo = TipoRegistro.NORMAL;
	} else if (tipoOpcao == 2) {
    tipo = TipoRegistro.COMPENSADA;
	}
	O que faz
		digita s√≥ o numero

 */
